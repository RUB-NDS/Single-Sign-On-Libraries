<saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"
                 Destination="https://mladevbb.cloudseal.com/admin/cloudseal_acs"
                 ID="_5320698387de4ad3894b5dc463bb7ffe"
                 InResponseTo="_3a60fedff9a4c81e533b48e4dfcbae9c"
                 IssueInstant="2012-12-12T08:54:34.301Z"
                 Version="2.0"
                 >
    <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">http://cloudseal.com</saml2:Issuer>
    <saml2p:Status>
        <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />
    </saml2p:Status>
    <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"
                     ID="_810e95e6c2968a6ebaa6355179158d96"
                     IssueInstant="2012-12-12T08:54:34.312Z"
                     Version="2.0"
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"
                     >
        <saml2:Issuer>http://cloudseal.com</saml2:Issuer>
        <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
            <ds:SignedInfo>
                <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />
                <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
                <ds:Reference URI="#_810e95e6c2968a6ebaa6355179158d96">
                    <ds:Transforms>
                        <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />
                        <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                            <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"
                                                    PrefixList="xs"
                                                    />
                        </ds:Transform>
                    </ds:Transforms>
                    <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />
                    <ds:DigestValue>eHqyoYOq3biV3DO3HACK2UUCU9I=</ds:DigestValue>
                </ds:Reference>
            </ds:SignedInfo>
            <ds:SignatureValue>OY2kFUCQM73z1RZ9s2TseNMc3wA+Jyb6g67jtqRhYvBuootAYbxIss4xhMWY8BLMMmfON2REr2pRBXX8N1o/I+MH7TOlZvHeNf7Ssph1BPheKRfni2WJuJRrAlM1nhI7WtEZyeTIe3BDRQvZQijPxFFcG+TJJFuVIh1KCOD0y7VoLAl5GvWfMYymEfTluSgUy9hN/EFberaAelMx8GiU1ZSHgBUl0fkzdkrF1/+s9hRv8zzuLLtFfcnIUNR5V0/G/ap6ijW9zIETmxQqIhAp0zmViPG9J0w7AbTPzlFZRBymWiaSNLK7IGmG0aq5ynEB+Ew654Ci8B/bGqAS7UHY80Wi53LpllCC7iVGJjVuoyrnia5kDkImlcxgjdIYq6RotcdFRHvNJiMo4iZhgWXIDHyJ1m6w40Yg2MuWEHXMQUrBIejaZElq8GqQ9OOL1Bcb1WMlZvGSo/DsuVUAnAA/0mh61rUTX1Li0FmNP6d451bo2jx4IhXVZfsNED+1TDVLpYN9yStuNZYh5ck1nsSJAXSZVtjcJ0YvwCrVjrBlgOLDvFGfMwjM8YsVf79/E+bXNUIX7dIhxPQp8ORjSNcTsYV24ZK4hFwzKRtDcl3O5s7HKZ1KzWZMlmP0w4gWDD7VONza/qgg3Xmh2FMsnlfZrXjrl4fyf2ZXiXnpIx+JugM=</ds:SignatureValue>
            <ds:KeyInfo>
                <ds:X509Data>
                    <ds:X509Certificate>MIIFxjCCA64CCQDmKiQWNBsGdzANBgkqhkiG9w0BAQUFADCBpDELMAkGA1UEBhMCRUUxEDAOBgNV
BAgMB0hhcmp1bWExEDAOBgNVBAcMB1RhbGxpbm4xFTATBgNVBAoMDENsb3Vkc2VhbCBPVTEfMB0G
A1UECwwWSW5mb3JtYXRpb24gVGVjaG5vbG9neTEWMBQGA1UEAwwNY2xvdWRzZWFsLmNvbTEhMB8G
CSqGSIb3DQEJARYSdGVhbUBjbG91ZHNlYWwuY29tMB4XDTEyMDIyNjIzMDE0MVoXDTM5MDcxMzIz
MDE0MVowgaQxCzAJBgNVBAYTAkVFMRAwDgYDVQQIDAdIYXJqdW1hMRAwDgYDVQQHDAdUYWxsaW5u
MRUwEwYDVQQKDAxDbG91ZHNlYWwgT1UxHzAdBgNVBAsMFkluZm9ybWF0aW9uIFRlY2hub2xvZ3kx
FjAUBgNVBAMMDWNsb3Vkc2VhbC5jb20xITAfBgkqhkiG9w0BCQEWEnRlYW1AY2xvdWRzZWFsLmNv
bTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALJT73qbpdz36rExZCFe+2XpxENwHydC
KB/lEIuWIB/BxoVNaI1JSiMGlpUigeqNlYejEX+f5CsZxzjKVGdRDDCU34AAVLXgnPz03qfijcS5
N14tpzdcaJ4zKzS0IBfvmyaGMEA/+8vUAbi64uuJ7mNgL1+ChOJMarsC4ZxdHlCjxdb4xUHXQ+j+
8OFbJYRxNMInc1NowFIMnvObog6oT4QvkIaMmRC6XxCu4sc+w5atwmmAgY4YcgnG70P7OLm8pXI1
BuVKZVl8+wcyx+z/0SuXIvylpE5ax3P9RDU2K4/tUGdmfhsmf8SWv0EuxDyhdYGYpcmABMDsUrWr
CFY/u3yJy4tQOod83c6ithMHySs71XS2APLBQO4OSp/Y3v17ssx1njJD98+E8aKL2IcvYt2/kDNE
YsCCoyI6Q5Jy2OfX1Qa+PY2PLA64adc4+HZB89bU5cgsKuKFqYInaYtz0vz4Ev5Ya0thGHdbUDhZ
6WRVXicYS25WKuGQst3BfnaGK2zRDP97LcIPSWMJsp9HIbg+AN+NUPreDNagZitmew3wGA/VcVrR
BauQ0Lg4kGc1fz1rjma76TiRKSe1RTjry/hSqJFJDxrblS9QN7ir2RtbJABEp2OYwKszEJy6oC9C
TNFFTTaxYOQmkZuhmcRkgtt3PM9kRmgkcoBDLPMC6aoxAgMBAAEwDQYJKoZIhvcNAQEFBQADggIB
ACg/huO+MMC7ov6vYPMGZdDWMx/gpl5oP6GyrLYuWP+jcfsScKsHjLzS3mTvlGvTiddY59j3Poxv
IAga6lKQ18YbD8u/8nuINXzzeaYl6iQmvdfUE8pPgIJpkgY1NyLsQUxIVrfeLIwtNHKWHhU8IONA
Nx2gSCL6MrrVoqN7UvYogp1PrMr0DOvE6NAPottKheNxLDAvNZHdI13w1CdB0YLYC4579Yw+z7Nu
08HAXVKY6FU/x7/vqvttLqrUOxspYpH3qCe0TOyEGT4D6MNlUFqabWaTxX602Ip1R04ubjq0Jzop
lfVkIEP+IErFyAPrNoz0QHzTPL9ktPwQkeKPpzz0FebtOJPIqNK+YWJQyWPq5HLsLL995asTb8jR
Q1FkCD/2i5cRq+ZtUxKxje59RucJZyBf5k6i91y/+FJ8wUPqW/RGruIbKa59YFezH2NShF2vv+T6
AGQL5uhW3yWqEOJojiYyX9VAIphEa8ocYxcs8stZx8kzZXfOL+8jkZdm7v2h2p5M16+oWBbRdqwm
pJ1WITq7RJkyiNhHPAFWIndLoO9+VzPLsk8I8tUNPzUWPCSNgBsPs6IgFVFqfvotHe9/aNOvsNXl
w7jHMu+eQktXknOkU41Xs75bswb1i4NO3B2GSlL1YzekDywcl0irxrF2SEMtVB5zBCoCKgLAp7KA</ds:X509Certificate>
                </ds:X509Data>
            </ds:KeyInfo>
        </ds:Signature>
        <saml2:Subject>
            <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">mladevbb</saml2:NameID>
            <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
                <saml2:SubjectConfirmationData InResponseTo="_3a60fedff9a4c81e533b48e4dfcbae9c"
                                               NotOnOrAfter="2012-12-12T16:54:29.291Z"
                                               Recipient="https://mladevbb.cloudseal.com/admin/cloudseal_acs"
                                               />
            </saml2:SubjectConfirmation>
        </saml2:Subject>
        <saml2:Conditions NotBefore="2012-12-12T08:54:24.301Z"
                          NotOnOrAfter="2012-12-12T16:54:29.291Z"
                          >
            <saml2:AudienceRestriction>
                <saml2:Audience>http://mladevbb.cloudseal.com/saml/sp</saml2:Audience>
            </saml2:AudienceRestriction>
        </saml2:Conditions>
        <saml2:AuthnStatement AuthnInstant="2012-12-12T08:54:34.312Z"
                              SessionIndex="_3a60fedff9a4c81e533b48e4dfcbae9c"
                              SessionNotOnOrAfter="2012-12-12T16:54:29.291Z"
                              >
            <saml2:AuthnContext>
                <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml2:AuthnContextClassRef>
            </saml2:AuthnContext>
        </saml2:AuthnStatement>
        <saml2:AttributeStatement>
            <saml2:Attribute Name="firstName"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >vladislav</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="lastName"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >Mladenov</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="email"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >vladislav.mladenov@test.de</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="username"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >mladevbb</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="birthday"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >Thu Jun 21 00:00:00 UTC 2012</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="country"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >Germany</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="phone"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >02343226742</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="hostname"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >mladevbb</saml2:AttributeValue>
            </saml2:Attribute>
            <saml2:Attribute Name="roles"
                             NameFormat="urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
                             >
                <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                      xsi:type="xs:string"
                                      >ROLE_ADMIN</saml2:AttributeValue>
            </saml2:Attribute>
        </saml2:AttributeStatement>
    </saml2:Assertion>
</saml2p:Response>
 
 
